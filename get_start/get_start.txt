rails -v
rails new app
cd rails
rails server
curl http://localhost:3000/

bin/rails g controller hello index
vi app/views/hello/index.html
<h1>Hello, Confirmation</h1>
vi config/routes.rb
Rails.application.routes.draw do
  get 'hello/index'
end

curl http://localhost:3000/hello/index


vi config/routes.rb
resources :articles
bin/rake routes

bin/rails controller articles
vi app/controllers/articles_controller.rb
def new
end
curl http://localhost:3000/articles/new
vi app/views/articles/new.html.erb
<h1>New Article</h1>
curl http://localhost:3000/articles/new

vi app/views/articles/new.html.erb
#<%= form_for :article do |f| %>
 <%= form_for :article, url: articles_path do |f| %>
  <p>
    <%= f.label :title %><br>
    <%= f.text_field :title %>
  </p>
    <%= f.label :text %><br>
    <%= f.text_area :text %>
  <p>
    <%= f.submit %>
  </p>
  <p>
  </p>
<% end %>
bin/rails routes

vi app/controllers/articles_controller.rb
def new
end
def create
  render plain: params[:article].inspect
end

bin/rails g model Article title:string text:text
vi db/migrate/2018091600_create_article.rb
bin/rake db:migrate
vi config/database.yml
rake db:migrate RAILS_ENV=production

vi app/controllers/articles_controller.rb
def create
 @article = Article.new(params[:article])
# @article = Article.new(params.require(:article).permit(:title, :text))
  
# @article.save
# redirect_to @article
end
private
def article_params
  params.require(:article).permit(:title, :text)
end
curl http://localhost:3000/articles/new
vi app/controllers/articles_controller.rb
def show
  @article = Article.find(params[:id])
end
vi app/views/articles/show.html.erb
<p>
  <strong>Title:</strong>
  <%= @article.title %>
</p>
<p>
  <strong>Text:</strong>
  <%= @article.text %>
</p>
curl http://localhost:3000/articles/new
vi app/controllers/article_controller.rb
def index
  @article = Article.all
end
def show
  @article = Article.find(params[:id])
end
def new
end
vi app/views/articles/index.html.erb
<h1>Listing articles</h1>
<table>
  <tr>
    <th>Title</th>
    <th>Text</th>
  </tr>
  <% @article.each do |article| %>
    <tr>
      <td><%= article.title %></td>
      <td><%= article.text %></td>
    </tr>
  <% end %>
</table>
curl http://localhost:3000/articles
vi app/views/hello/index.html.erb
<h1>Hello, Blog!</h1>
<%= link_to 'New article', new_article_path%>
<%= link_to 'My Blog', controller: 'articles' %>
vi app/views/articles/new.html.erb
<%= form_for :article, url: article_path do |f| %>
<% end %>
<%= link_to '', articles_path %>
vi app/views/articles/show.html.erb
<p>
  <strong>Title:</strong>
  <%= @article.title %>
</p>
<p>
  <strong>Text:</strong>
  <%= @article.text %>
</p>
<%= link_to 'Back', articles_path %>

vi app/models/articles.rb
class Article < ActiveRecord::Base
end
vi app/models/articles.rb
class Article < ActiveRecord::Base
  validates :title, presence: true,
                    length: { minimum: 5 }
end
vi app/controllers/articles_controller.rb
def new
  @article = Article.new
end
def create
  @article = Article.new(article_params)
  if @article.save
    redirect_to @article
  else
    render 'new'
  end
end
private
def article_params
  params.require(:article).permit(:title, :text)
end
curl http://localhost:3000/articles/new
vi app/views/articles/new.html.erb
<%= form_for :article, url: articles_path do |f| %>
<% if @article.errors.any? %>
  <div id="error_explanation">
    <h2>
      <%= pluralize(@article.errors.count, "error") %> prohibited this article from being saved:
    </h2>
    <ul>
      <% @article.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
    </ul>
  </div>
<% end %>
<p>
  <%= f.label :title %><br>
  <%= f.text_field :title %>
</p>
<p>
  <%= f.label :text %><br>
  <%= f.text_area :text%>
</p>
<p>
  <%= f.submit %>
</p>
<% link_to 'Back', articles_path %>

vi app/controllers/articles_controller.rb
def new
  @article = Article.new
end
def edit
  @article = Article.find(params[:id])
end
def create
  @article = Article.new(artilce_params)
  if @artilce.save
    redirect_to @article
  else
    render 'new'
  end
end
vi app/views/articles/edit.html.erb
<h1>Editing article</h1>
<%= form_for :article, url: article_path(@article), method: :patch do |f| %>
  <% if @article.errors.any? %>
    <div id="error_explanation">
      <h2>
        <%= pluralize(@article.errors.count, "error") %> prohibited this article form being saved:
      </h2>
      <ul>
        <% @article.errrors.full_messages.each do |msg| %>
          <li><%= msg %></li>
        <% end %>
      </ul>
    </div>
  <% end %>
  <%= link_to 'Back', articles_path %>
  vi app/controllers/artilces_contorller.rb
  def update
    @article = Article.find(params[:id])
    if @article.update(aritlce_params)
      redirect_to @article
    else
      render 'edit'
    end
  end
  vi app/views/articles/index.html.erb
  <table>
    <tr>
    </tr>
    <% @articles.each do |article| %>
     <tr>
       <td>><%= article.title %></td>
       <td><%= article.text %></td>
       <td><%= link_to 'Show', article_path(article) %></td>
       <td><%= link_to 'Edit', edit_article_path(article) %></td>
     </tr>
   <% end %>
  </table>
vi app/views/articles/show.html.erb
<%= link_to 'Back', article_path %>
<%= link_to 'Edit', edit_article_path(@article) %>
vi app/views/articles/_form.html.erb
<%= form_for @article do |f| %>
  <% if @article.errors.any? %>
    <div id="error_explanation">
      <h2>
        <%= pluralize(@article.errors.count "error") %>prohibited this article from being saved:
      </h2>
      <ul>
        <% @article.errors.full_messages.each do |msg| %>
          <li><%= msg %></li>
        <% end %>
      </ul>
    </div>
  <% end %>
  <p>
    <%= f.label :title %>
    <%= f.text_field :title %>
  </p>
    <%= f.label :text %>
    <%= f.text_area :text %>
  <p>
    <%= f.submit %>
  </p>
  <p>
  </p>
<% end %>
vi app/views/aticles/new.html.erb
<h1>New article</h1>
<%= render 'form' %>
<%= link_to 'Back', articles_path %>
vi app/views/edit.html.erb
<h1>Edit article</h1>
<%= render 'form' %>
<%= link_to 'Back', articles_path %>

rake routes
vi app/controllers/articles_controller.rb
def destroy
  @article = Article.find(params[:id])
  @article.destroy
  redirect_to articles_path
end
vi app/views/articles/inde.html.erb
<%= link_to 'New article', new_article_path %>
...
<th colspan="3"></th>
...
<td><%= link_to 'Destroy', article_path(article),
            method: :delete,
            data: { confirm: 'Are you sure?' } %></td>

bin/rails g model Comment commenter:string body: text article:references
vi app/modless/comment.rb
class Comment < ActiveRecord::Base
  belongs_to :article
end
vi dg/migrate/20180916093700_create_comment.rb
class CreateCommnets < ActiveRecord::Migration
  def change
    create_table :comment do |t|
      t.string :commenter
      t.text :body
      t.references :article, index: true
      t.timestamps null: false
    end
  end
end
bin/rake db:migrate

vi app/models/article.rb
class Artilce < ActiveRecord::Base
  has_many :comments
  validates :title, presence: true,
                    lenght: { minimum 5 }
end
vi conifg/routes.rb
resources :articles do
  resoureces :comments
end

bin/rails g controller Comments
vi app/views/articles/show.html.erb
vi app/controllers/comments_controller.rb
class CommentsController < ApplicationController
  def create
    @article = Article.find(params[:article_id])
    @comment = @article.comments.create(comment_params)
    redirect_to article_path(@article)
  end
  private
  def comment_params
    params.require(:comment).permit(:commneter, :body)
  end
end
vi app/views/articles/show.html.erb


vi app/views/comments/_comment.html.erb
vi app/views/articles/show.html.erb
vi app/views/comments/_form.html.erb
vi app/views/articles/show.html.erb
vi app/views/comments/_comment.html.erb
vi app/controllers/comments_controller.rb
def destroy
  @article = Article.find(params[:article_id])
  @comment = @article.comments.find(params[:id])
  @comment.destroy
  redirect_to article_path(@article )
end
vi app/models/article.rb
class Article < ActiveRecord::Base
  has_many :comments, dependent: :destroy
  validates :title, presence: true,
                    length: { minimum: 5 }
end

vi app/controllers/articles_controller.rb
class ArticlesController < ApplicationController
  http_basic_authenticate_with name: "tky", password: "xxx", except: [:index, :show]
  def index
    @article = Article.all
  end
end
vi app/contollers/comments_controller.rb
http_basic_authenticate_with name: "tky", password: "xxx", only: :destroy


